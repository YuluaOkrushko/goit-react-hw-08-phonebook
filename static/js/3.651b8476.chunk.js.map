{"version":3,"sources":["Components/ContactForm/ContactForm.module.css","Components/ContactList/ContactList.module.css","Components/Filter/Filter.module.css","Pages/ContactPage/ContactPage.module.css","Redux/contact/operations/contactOperations.js","Redux/contact/selectors.js","Components/ContactForm/ContactForm.js","Components/ContactList/ContactList.js","Components/Filter/Filter.js","Pages/ContactPage/ContactPage.js"],"names":["module","exports","addContact","name","number","dispatch","contactActions","addContactRequest","axios","post","then","data","addContactSuccess","catch","error","addContactError","deleteContact","id","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","fetchContacts","fetchContactsRequest","get","fetchContactsSuccess","fetchContactsError","getContacts","state","contacts","phoneBookReducer","getFilter","filter","filterContactReducer","getVisibleContacts","createSelector","contact","toLowerCase","includes","ContactForm","isExist","duplicateContact","handleChange","e","target","value","setState","handleSubmit","preventDefault","props","map","setTimeout","onSubmit","handleCloseErrorWindow","this","className","styles","upperWrapper","headWrapper","CSSTransition","in","appear","timeout","classNames","unmountOnExit","title","onClick","wrapper","title_item","input","type","autoComplete","onChange","mask","placeholder","pattern","button_wrapper","button","disabled","Component","connect","selectors","contactOperations","ContactList","handleDeleteContact","TransitionGroup","component","item","container","telName","telNumber","onFilter","filterActions","ContactView","onFetchContacts","length","mapDispatchToProps"],"mappings":"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","file":"static/js/3.651b8476.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"upperWrapper\":\"ContactForm_upperWrapper__z4hFQ\",\"headWrapper\":\"ContactForm_headWrapper__n6v2J\",\"title\":\"ContactForm_title__1qB6H\",\"title_item\":\"ContactForm_title_item__1uHhY\",\"button_wrapper\":\"ContactForm_button_wrapper__1z2Ut\",\"button\":\"ContactForm_button__p1cmc\",\"wrapper\":\"ContactForm_wrapper__1jF49\",\"input\":\"ContactForm_input__3sd4Z\",\"appear\":\"ContactForm_appear__a4_Z-\",\"appearActive\":\"ContactForm_appearActive__3hUqL\",\"error\":\"ContactForm_error__1FE1_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__16m1C\",\"telNumber\":\"ContactList_telNumber__mK4-I\",\"telName\":\"ContactList_telName__1qvc9\",\"container\":\"ContactList_container__39q8e\",\"button\":\"ContactList_button__1H2q5\",\"enter\":\"ContactList_enter__3urRH\",\"enterActive\":\"ContactList_enterActive__1SKpF\",\"exit\":\"ContactList_exit__1cbp5\",\"exitActive\":\"ContactList_exitActive__390yo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Filter_wrapper__2EsJN\",\"input\":\"Filter_input__341VZ\",\"title\":\"Filter_title__wnih0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactPage_container__QRlcE\",\"wrapper\":\"ContactPage_wrapper__wHBJa\"};","import axios from 'axios';\r\nimport contactActions from '../actions/contactActions';\r\n\r\nconst addContact = ({ name, number }) => dispatch => {\r\n  dispatch(contactActions.addContactRequest());\r\n\r\n  axios\r\n    .post('http://localhost:2000/contacts', { name, number })\r\n    .then(({ data }) => {\r\n      dispatch(contactActions.addContactSuccess(data));\r\n    })\r\n    .catch(error => dispatch(contactActions.addContactError(error)));\r\n};\r\nconst fetchContacts = () => dispatch => {\r\n  dispatch(contactActions.fetchContactsRequest());\r\n\r\n  axios\r\n    .get('http://localhost:2000/contacts')\r\n    .then(({ data }) => dispatch(contactActions.fetchContactsSuccess(data)))\r\n    .catch(error => dispatch(contactActions.fetchContactsError(error)));\r\n};\r\nconst deleteContact = id => dispatch => {\r\n  dispatch(contactActions.deleteContactRequest());\r\n\r\n  axios\r\n    .delete(`http://localhost:2000/contacts/${id}`)\r\n    .then(() => {\r\n      dispatch(contactActions.deleteContactSuccess(id));\r\n    })\r\n    .catch(error => dispatch(contactActions.deleteContactError(error)));\r\n};\r\n\r\nexport default {\r\n  addContact,\r\n  deleteContact,\r\n  fetchContacts,\r\n};\r\n","import { createSelector } from 'reselect';\r\n\r\nconst getContacts = state => state.contacts.phoneBookReducer;\r\nconst getFilter = state => state.filter.filterContactReducer;\r\n\r\nconst getVisibleContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    return contacts.filter(contact =>\r\n      !filter ? true : contact.name.toLowerCase().includes(filter),\r\n    );\r\n  },\r\n);\r\n\r\nexport default {\r\n  getContacts,\r\n  getFilter,\r\n  getVisibleContacts,\r\n};\r\n","import React, { Component } from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport { connect } from 'react-redux';\r\nimport contactOperations from '../../Redux/contact/operations/contactOperations';\r\nimport selectors from '../../Redux/contact/selectors';\r\nimport styles from './ContactForm.module.css';\r\nimport InputMask from 'react-input-mask';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n    isExist: false,\r\n    duplicateContact: '',\r\n  };\r\n  handleChange = e => {\r\n    const { name, value } = e.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    const { name } = this.state;\r\n    const { contacts } = this.props;\r\n    const availableNames = contacts.map(contact => contact.name.toLowerCase());\r\n\r\n    if (availableNames.includes(name.toLowerCase())) {\r\n      this.setState({ isExist: true, duplicateContact: name });\r\n      setTimeout(\r\n        () => this.setState({ isExist: false, duplicateContact: '' }),\r\n        5000,\r\n      );\r\n    } else {\r\n      this.props.onSubmit(this.state);\r\n      this.setState({\r\n        name: '',\r\n        number: '',\r\n        isExist: false,\r\n        duplicateContact: '',\r\n      });\r\n    }\r\n  };\r\n  handleCloseErrorWindow = () => {\r\n    this.setState({\r\n      isExist: false,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { name, number, isExist, duplicateContact } = this.state;\r\n    return (\r\n      <div className={styles.upperWrapper}>\r\n        <div className={styles.headWrapper}>\r\n          <CSSTransition\r\n            in={true}\r\n            appear={true}\r\n            timeout={500}\r\n            classNames={styles}\r\n            unmountOnExit\r\n          >\r\n            <h1 className={styles.title}>Phonebook</h1>\r\n          </CSSTransition>\r\n          <CSSTransition\r\n            in={isExist}\r\n            timeout={250}\r\n            classNames={styles}\r\n            unmountOnExit\r\n          >\r\n            <div onClick={this.handleCloseErrorWindow} className={styles.error}>\r\n              {duplicateContact} already exist!\r\n            </div>\r\n          </CSSTransition>\r\n        </div>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label>\r\n            <div className={styles.wrapper}>\r\n              <h3 className={styles.title_item}>Name</h3>\r\n              <input\r\n                className={styles.input}\r\n                type=\"text\"\r\n                autoComplete=\"off\"\r\n                value={name}\r\n                name=\"name\"\r\n                onChange={this.handleChange}\r\n              />\r\n            </div>\r\n          </label>\r\n          <label>\r\n            <div className={styles.wrapper}>\r\n              <h3 className={styles.title_item}>Number</h3>\r\n              <InputMask\r\n                mask=\"999-99-99\"\r\n                className={styles.input}\r\n                type=\"tel\"\r\n                autoComplete=\"off\"\r\n                onChange={this.handleChange}\r\n                value={number}\r\n                name=\"number\"\r\n                placeholder=\"000-00-00\"\r\n                pattern=\"[0-9]{3}-[0-9]{2}-[0-9]{2}\"\r\n              />\r\n            </div>\r\n          </label>\r\n          <div className={styles.button_wrapper}>\r\n            <button\r\n              className={styles.button}\r\n              type=\"submit\"\r\n              disabled={name === '' || number === '' ? true : false}\r\n            >\r\n              Add contact\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: selectors.getContacts(state),\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: data => dispatch(contactOperations.addContact(data)),\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import React, { Component } from 'react';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport contactOperations from '../../Redux/contact/operations/contactOperations';\r\nimport selectors from '../../Redux/contact/selectors';\r\nimport { connect } from 'react-redux';\r\nimport styles from './ContactList.module.css';\r\n\r\nclass ContactList extends Component {\r\n  handleDeleteContact = id => () => {\r\n    const { deleteContact } = this.props;\r\n    deleteContact(id);\r\n  };\r\n  render() {\r\n    const { contacts } = this.props;\r\n    return (\r\n      <TransitionGroup component=\"ul\">\r\n        {contacts.map(item => (\r\n          <CSSTransition key={item.id} timeout={250} classNames={styles}>\r\n            <li>\r\n              <div className={styles.wrapper}>\r\n                <div className={styles.container}>\r\n                  <span className={styles.telName}>{item.name}</span>\r\n                  <span className={styles.telNumber}>{item.number}</span>\r\n                  <button\r\n                    className={styles.button}\r\n                    id={item.id}\r\n                    onClick={this.handleDeleteContact(item.id)}\r\n                  >\r\n                    Delete\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </li>\r\n          </CSSTransition>\r\n        ))}\r\n      </TransitionGroup>\r\n    );\r\n    // return (\r\n    //   <TransitionGroup component=\"ul\" className={styles.item}>\r\n    //     {contacts.map(item => (\r\n    //       <CSSTransition key={item.id} timeout={250} classNames={styles}>\r\n    //         <li className={styles.list}>\r\n    //           {item.name} : {item.number}\r\n    //           <button\r\n    //             className={styles.button}\r\n    //             id={item.id}\r\n    //             onClick={this.handleDeleteContact(item.id)}\r\n    //           >\r\n    //             Delete\r\n    //           </button>\r\n    //         </li>\r\n    //       </CSSTransition>\r\n    //     ))}\r\n    //   </TransitionGroup>\r\n    // );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  deleteContact: id => dispatch(contactOperations.deleteContact(id)),\r\n});\r\n\r\nconst mapStateToProps = state => {\r\n  return { contacts: selectors.getVisibleContacts(state) };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport filterActions from '../../Redux/contact/actions/filterActions';\r\nimport selectors from '../../Redux/contact/selectors';\r\nimport styles from './Filter.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Filter = ({ value, onFilter }) => (\r\n  <div className={styles.wrapper}>\r\n    <h3 className={styles.title}>Find contact</h3>\r\n    <input\r\n      className={styles.input}\r\n      type=\"text\"\r\n      autoComplete=\"off\"\r\n      onChange={onFilter}\r\n      value={value}\r\n      name=\"filter\"\r\n    ></input>\r\n  </div>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  filter: selectors.getFilter(state),\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n  onFilter: e => dispatch(filterActions(e.target.value)),\r\n});\r\n\r\nFilter.propTypes = {\r\n  onFilter: PropTypes.func,\r\n  value: PropTypes.string,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport ContactForm from '../../Components/ContactForm/ContactForm';\r\nimport ContactList from '../../Components/ContactList/ContactList';\r\nimport Filter from '../../Components/Filter/Filter';\r\nimport contactOperations from '../../Redux/contact/operations/contactOperations';\r\nimport selectors from '../../Redux/contact/selectors';\r\nimport styles from './ContactPage.module.css';\r\n\r\nclass ContactView extends Component {\r\n  componentDidMount() {\r\n    this.props.onFetchContacts();\r\n  }\r\n\r\n  render() {\r\n    const { contacts } = this.props;\r\n    return (\r\n      <div className={styles.wrapper}>\r\n        <ContactForm />\r\n\r\n        <CSSTransition\r\n          in={contacts.length > 1}\r\n          timeout={500}\r\n          classNames={styles}\r\n          unmountOnExit\r\n        >\r\n          <Filter />\r\n        </CSSTransition>\r\n\r\n        <ContactList />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state => ({\r\n  contacts: selectors.getContacts(state),\r\n});\r\nconst mapDispatchToProps = {\r\n  onFetchContacts: contactOperations.fetchContacts,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactView);\r\n"],"sourceRoot":""}